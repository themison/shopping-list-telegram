from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import *
from utils import parse_items, format_items_list, format_lists_menu
from config import *

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
USER_STATES = {}

STATE_WAITING_FOR_LIST_NAME = "waiting_for_list_name"
STATE_WAITING_FOR_ITEMS = "waiting_for_items"
STATE_WAITING_FOR_INVITE = "waiting_for_invite"
STATE_SELECTING_LIST = "selecting_list"


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    welcome_text = (
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/lists - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏\n"
        "/items - —Ä–∞–±–æ—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!"
    )

    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üõí –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫:\n\n"
        "*–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:*\n"
        "/lists - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫\n\n"
        "*–†–∞–±–æ—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:*\n"
        "/items - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)\n"
        "‚Ä¢ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n\n"
        "*–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤:*\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏:\n"
        "–∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞,\n"
        "–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–∞–±—É–ª—è—Ü–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "—è–±–ª–æ–∫–∏, –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±\n"
        "–±–∞–Ω–∞–Ω—ã x3; –π–æ–≥—É—Ä—Ç x2\n"
        "–∫–∞—Ä—Ç–æ—à–∫–∞\n"
        "–º–æ—Ä–∫–æ–≤—å x5"
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")


async def lists_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lists"""
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lists = get_user_lists(user_id)

    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="create_list")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for i, lst in enumerate(lists):
        role_icon = "üëë" if lst["user_role"] == "owner" else "üë•"
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{role_icon} {lst['name']}",
                    callback_data=f"select_list_{lst['id']}",
                )
            ]
        )

    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        format_lists_menu(lists), reply_markup=reply_markup, parse_mode="Markdown"
    )


async def items_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /items"""
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ë–î
    current_list_id = context.user_data.get("current_list_id")

    if not current_list_id:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
        lists = get_user_lists(user_id)
        if lists:
            current_list_id = lists[0]["id"]
            context.user_data["current_list_id"] = current_list_id
        else:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /lists"
            )
            return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–ø–∏—Å–∫–∞
    list_details = get_list_details(current_list_id, user_id)
    if not list_details:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
    items = get_list_items(current_list_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
    message_text += format_items_list(items)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{current_list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                callback_data=f"mark_completed_{current_list_id}",
            )
        ],
        [
            InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{current_list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ",
                callback_data=f"clear_completed_{current_list_id}",
            )
        ],
        [
            InlineKeyboardButton(
                "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"invite_user_{current_list_id}",
            )
        ],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message_text, reply_markup=reply_markup, parse_mode="Markdown"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = create_user(query.from_user.id)
    update_user_activity(query.from_user.id)

    data = query.data

    if data == "create_list":
        USER_STATES[user_id] = STATE_WAITING_FOR_LIST_NAME
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")

    elif data.startswith("select_list_"):
        list_id = int(data.split("_")[2])
        context.user_data["current_list_id"] = list_id

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        if list_details:
            message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
            message_text += format_items_list(items)

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                        callback_data=f"mark_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ",
                        callback_data=f"clear_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"invite_user_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message_text, reply_markup=reply_markup, parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É")

    elif data.startswith("add_items_"):
        list_id = int(data.split("_")[2])
        context.user_data["current_list_id"] = list_id
        USER_STATES[user_id] = STATE_WAITING_FOR_ITEMS
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):"
        )

    elif data.startswith("mark_completed_"):
        list_id = int(data.split("_")[2])
        context.user_data["current_list_id"] = list_id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        items = get_list_items(list_id)
        pending_items = [item for item in items if not item["completed"]]

        if not pending_items:
            await query.edit_message_text("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ")
            return

        keyboard = []
        for item in pending_items:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"‚úÖ {item['name']}"
                        + (f" x{item['quantity']}" if item["quantity"] > 1 else ""),
                        callback_data=f"complete_item_{item['id']}",
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_items_{list_id}")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ:", reply_markup=reply_markup
        )

    elif data.startswith("complete_item_"):
        item_id = int(data.split("_")[2])
        toggle_item_completed(item_id, True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        list_id = context.user_data.get("current_list_id")
        if list_id:
            items = get_list_items(list_id)
            list_details = get_list_details(list_id, user_id)

            message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
            message_text += format_items_list(items)

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                        callback_data=f"mark_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ",
                        callback_data=f"clear_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"invite_user_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message_text, reply_markup=reply_markup, parse_mode="Markdown"
            )

    elif data.startswith("delete_items_"):
        list_id = int(data.split("_")[2])
        context.user_data["current_list_id"] = list_id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        items = get_list_items(list_id)

        if not items:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return

        keyboard = []
        for item in items:
            status = "‚úÖ" if item["completed"] else "‚≠ï"
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"{status} {item['name']}"
                        + (f" x{item['quantity']}" if item["quantity"] > 1 else ""),
                        callback_data=f"delete_item_{item['id']}",
                    )
                ]
            )

        keyboard.append(
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"delete_all_{list_id}"
                )
            ]
        )
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_items_{list_id}")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup
        )

    elif data.startswith("delete_item_"):
        item_id = int(data.split("_")[2])
        delete_item(item_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        list_id = context.user_data.get("current_list_id")
        if list_id:
            items = get_list_items(list_id)
            list_details = get_list_details(list_id, user_id)

            message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
            message_text += format_items_list(items)

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                        callback_data=f"mark_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ",
                        callback_data=f"clear_completed_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"invite_user_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message_text, reply_markup=reply_markup, parse_mode="Markdown"
            )

    elif data.startswith("delete_all_"):
        list_id = int(data.split("_")[2])
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM items WHERE list_id = ?", (list_id,))
            conn.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
        message_text += format_items_list(items)

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data=f"mark_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ", callback_data=f"clear_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
                )
            ],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif data.startswith("clear_completed_"):
        list_id = int(data.split("_")[2])
        clear_completed_items(list_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
        message_text += format_items_list(items)

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data=f"mark_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ", callback_data=f"clear_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
                )
            ],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif data.startswith("invite_user_"):
        list_id = int(data.split("_")[2])
        context.user_data["current_list_id"] = list_id
        USER_STATES[user_id] = STATE_WAITING_FOR_INVITE
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
            "(–ï–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)"
        )

    elif data.startswith("back_to_items_"):
        list_id = int(data.split("_")[3])
        context.user_data["current_list_id"] = list_id

        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
        message_text += format_items_list(items)

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data=f"mark_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ", callback_data=f"clear_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
                )
            ],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif data == "change_list":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞
        lists = get_user_lists(user_id)

        keyboard = []
        for lst in lists:
            role_icon = "üëë" if lst["user_role"] == "owner" else "üë•"
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"{role_icon} {lst['name']}",
                        callback_data=f"select_list_{lst['id']}",
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_list")]
        )
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            format_lists_menu(lists), reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif data == "close":
        await query.delete_message()

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    user_state = USER_STATES.get(user_id)

    if user_state == STATE_WAITING_FOR_LIST_NAME:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        list_name = update.message.text.strip()
        if not list_name:
            await update.message.reply_text(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        list_id = create_list(list_name, user_id)
        context.user_data["current_list_id"] = list_id
        del USER_STATES[user_id]

        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ '{list_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
        message_text += format_items_list(items)

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º", callback_data=f"mark_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ", callback_data=f"clear_completed_{list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
                )
            ],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif user_state == STATE_WAITING_FOR_ITEMS:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
        current_list_id = context.user_data.get("current_list_id")
        if not current_list_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫")
            del USER_STATES[user_id]
            return

        # –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items_to_add = parse_items(update.message.text)

        if not items_to_add:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for item_name, quantity in items_to_add:
            add_item_to_list(current_list_id, item_name, quantity, user_id)

        del USER_STATES[user_id]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        items = get_list_items(current_list_id)
        list_details = get_list_details(current_list_id, user_id)

        message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
        message_text += format_items_list(items)
        message_text += f"\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_add)}"

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"add_items_{current_list_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                    callback_data=f"mark_completed_{current_list_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã",
                    callback_data=f"delete_items_{current_list_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ",
                    callback_data=f"clear_completed_{current_list_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    callback_data=f"invite_user_{current_list_id}",
                )
            ],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif user_state == STATE_WAITING_FOR_INVITE:
        # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        current_list_id = context.user_data.get("current_list_id")
        if not current_list_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫")
            del USER_STATES[user_id]
            return

        try:
            invited_telegram_id = int(update.message.text.strip())
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        success, message = invite_user_to_list(
            current_list_id, invited_telegram_id, user_id
        )

        del USER_STATES[user_id]

        if success:
            owner_telegram_id = get_list_owner(current_list_id)
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω!\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É:\n"
                f"`/start_{current_list_id}_{owner_telegram_id}`",
                parse_mode="Markdown",
            )
        else:
            await update.message.reply_text(message)

    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )


async def handle_start_with_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not context.args or len(context.args) < 2:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await start_command(update, context)
        return

    try:
        list_id = int(context.args[0])
        owner_telegram_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    owner_id_result = None
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id FROM users WHERE telegram_id = ?", (owner_telegram_id,)
        )
        result = cursor.fetchone()
        owner_id_result = result["id"] if result else None

    if not owner_id_result or owner_id_result == user_id:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        return

    # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    success, message = invite_user_to_list(
        list_id, update.effective_user.id, owner_id_result
    )

    if success:
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É!")
        context.user_data["current_list_id"] = list_id
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {message}")
