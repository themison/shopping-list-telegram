from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import uuid
import hashlib
from database import *
from utils import parse_items, format_items_list, format_lists_menu
from config import *

USER_STATES = {}
USER_CURRENT_LISTS = {}

STATE_WAITING_FOR_LIST_NAME = "waiting_for_list_name"
STATE_WAITING_FOR_ITEMS = "waiting_for_items"
STATE_WAITING_FOR_INVITE = "waiting_for_invite"
STATE_SELECTING_LIST = "selecting_list"
STATE_CONTINUOUS_ADDING = "continuous_adding"


def generate_invite_token(list_id, owner_id):
    data = f"{list_id}_{owner_id}_{uuid.uuid4()}"
    token = hashlib.md5(data.encode()).hexdigest()[:16]
    return token


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    if context.args:
        token = context.args[0] if len(context.args) > 0 else None
        if token:
            invite_data = get_invite_by_token(token)
            if invite_data:
                list_id = invite_data["list_id"]
                owner_id = invite_data["owner_id"]

                success, message = invite_user_to_list_as_admin(
                    list_id, update.effective_user.id, owner_id
                )

                if success:
                    USER_CURRENT_LISTS[update.effective_user.id] = list_id
                    await update.message.reply_text(
                        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É!\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                    )
                    await show_current_list_menu(update, user_id, list_id)
                    return
                else:
                    await update.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–ø–∏—Å–∫—É: {message}"
                    )
                    return

    welcome_text = (
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/lists - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏\n"
        "/items - —Ä–∞–±–æ—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!"
    )

    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõí –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫:\n\n"
        "*–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:*\n"
        "/lists - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫\n\n"
        "*–†–∞–±–æ—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:*\n"
        "/items - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n\n"
        "*–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤:*\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏:\n"
        "–∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞,\n"
        "–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–∞–±—É–ª—è—Ü–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "—è–±–ª–æ–∫–∏, –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±\n"
        "–±–∞–Ω–∞–Ω—ã x3; –π–æ–≥—É—Ä—Ç x2\n"
        "–∫–∞—Ä—Ç–æ—à–∫–∞\n"
        "–º–æ—Ä–∫–æ–≤—å x5"
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")


async def lists_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    lists = get_user_lists(user_id)

    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="create_list")],
    ]

    for lst in lists:
        role_icon = "üëë" if lst["user_role"] == "owner" else "üë•"
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{role_icon} {lst['name']}",
                    callback_data=f"select_list_{lst['id']}",
                )
            ]
        )

    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        format_lists_menu(lists), reply_markup=reply_markup, parse_mode="Markdown"
    )


async def items_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    current_list_id = USER_CURRENT_LISTS.get(user_id)

    if not current_list_id:
        lists = get_user_lists(user_id)
        if lists:
            current_list_id = lists[0]["id"]
            USER_CURRENT_LISTS[user_id] = current_list_id
        else:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /lists"
            )
            return

    list_details = get_list_details(current_list_id, user_id)
    if not list_details:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
        return

    items = get_list_items(current_list_id)

    message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
    message_text += format_items_list(items)

    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{current_list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã",
                callback_data=f"delete_items_{current_list_id}_page_0",
            )
        ],
        [
            InlineKeyboardButton(
                "üß® –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list_{current_list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"invite_user_{current_list_id}",
            )
        ],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message_text, reply_markup=reply_markup, parse_mode="Markdown"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = create_user(query.from_user.id)
    update_user_activity(query.from_user.id)

    data = query.data

    if data == "create_list":
        USER_STATES[user_id] = STATE_WAITING_FOR_LIST_NAME
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")

    elif data.startswith("select_list_"):
        list_id = int(data.split("_")[2])
        USER_CURRENT_LISTS[user_id] = list_id

        items = get_list_items(list_id)
        list_details = get_list_details(list_id, user_id)

        if list_details:
            message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
            message_text += format_items_list(items)

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã",
                        callback_data=f"delete_items_{list_id}_page_0",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üß® –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list_{list_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        callback_data=f"invite_user_{list_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message_text, reply_markup=reply_markup, parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É")

    elif data.startswith("add_items_"):
        list_id = int(data.split("_")[2])
        USER_CURRENT_LISTS[user_id] = list_id
        USER_STATES[user_id] = STATE_CONTINUOUS_ADDING

        keyboard = [
            [
                InlineKeyboardButton(
                    "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                    callback_data=f"exit_adding_{list_id}",
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ).\n"
            "–í—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É "
            "–∏–ª–∏ –Ω–µ –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'.",
            reply_markup=reply_markup,
        )

    elif data.startswith("exit_adding_"):
        list_id = int(data.split("_")[2])
        USER_CURRENT_LISTS[user_id] = list_id
        if user_id in USER_STATES:
            del USER_STATES[user_id]
        await show_items_list(query, user_id, list_id)

    elif data.startswith("delete_items_"):
        parts = data.split("_")
        list_id = int(parts[2])
        page = int(parts[4]) if len(parts) > 4 else 0

        USER_CURRENT_LISTS[user_id] = list_id

        all_items = get_list_items(list_id)
        total_items = len(all_items)
        start_idx = page * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        items_page = all_items[start_idx:end_idx]

        if not items_page:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return

        keyboard = []
        for item in items_page:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"üóë {item['name']}"
                        + (f" x{item['quantity']}" if item["quantity"] > 1 else ""),
                        callback_data=f"delete_single_item_{item['id']}",
                    )
                ]
            )

        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_items_{list_id}_page_{page-1}"
                )
            )
        if end_idx < total_items:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"delete_items_{list_id}_page_{page+1}"
                )
            )

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append(
            [
                InlineKeyboardButton(
                    "üß® –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"delete_all_{list_id}"
                )
            ]
        )
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_items_{list_id}")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(items_page)} –∏–∑ {total_items}",
            reply_markup=reply_markup,
        )

    elif data.startswith("delete_single_item_"):
        item_id = int(data.split("_")[3])
        delete_item(item_id)

        list_id = USER_CURRENT_LISTS.get(user_id)
        if list_id:
            await show_items_list(query, user_id, list_id)

    elif data.startswith("delete_all_"):
        list_id = int(data.split("_")[2])
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM items WHERE list_id = ?", (list_id,))
            conn.commit()

        await show_items_list(query, user_id, list_id)

    elif data.startswith("clear_list_"):
        list_id = int(data.split("_")[2])
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM items WHERE list_id = ?", (list_id,))
            conn.commit()

        await show_items_list(query, user_id, list_id)

    elif data.startswith("invite_user_"):
        list_id = int(data.split("_")[2])
        USER_CURRENT_LISTS[user_id] = list_id

        token = generate_invite_token(list_id, user_id)
        save_invite_token(token, list_id, user_id)

        invite_link = f"https://t.me/{BOT_USERNAME}?start={token}"

        await query.edit_message_text(
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫:\n\n"
            f"`{invite_link}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç–æ–º—É, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å.\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–ø–∏—Å–∫–∞!",
            parse_mode="Markdown",
        )

    elif data.startswith("back_to_items_"):
        list_id = int(data.split("_")[3])
        USER_CURRENT_LISTS[user_id] = list_id
        await show_items_list(query, user_id, list_id)

    elif data == "change_list":
        lists = get_user_lists(user_id)

        keyboard = []
        for lst in lists:
            role_icon = "üëë" if lst["user_role"] == "owner" else "üë•"
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"{role_icon} {lst['name']}",
                        callback_data=f"select_list_{lst['id']}",
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_list")]
        )
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            format_lists_menu(lists), reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif data == "close":
        await query.delete_message()

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def show_items_list(query, user_id, list_id):
    items = get_list_items(list_id)
    list_details = get_list_details(list_id, user_id)

    message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
    message_text += format_items_list(items)

    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}_page_0"
            )
        ],
        [
            InlineKeyboardButton(
                "üß® –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list_{list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
            )
        ],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message_text, reply_markup=reply_markup, parse_mode="Markdown"
    )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = create_user(update.effective_user.id)
    update_user_activity(update.effective_user.id)

    user_state = USER_STATES.get(user_id)

    if update.message.text.startswith("/"):
        if user_state == STATE_CONTINUOUS_ADDING:
            del USER_STATES[user_id]

    if user_state == STATE_WAITING_FOR_LIST_NAME:
        if update.message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"]:
            del USER_STATES[user_id]
            await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        list_name = update.message.text.strip()
        if not list_name:
            await update.message.reply_text(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        list_id = create_list(list_name, user_id)
        USER_CURRENT_LISTS[user_id] = list_id
        del USER_STATES[user_id]

        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ '{list_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        await show_current_list_menu(update, user_id, list_id)

    elif user_state == STATE_CONTINUOUS_ADDING:
        current_list_id = USER_CURRENT_LISTS.get(user_id)
        if not current_list_id:
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                        callback_data=f"exit_adding_{current_list_id or 0}",
                    )
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫", reply_markup=reply_markup
            )
            del USER_STATES[user_id]
            return

        items_to_add = parse_items(update.message.text)

        if not items_to_add:
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                        callback_data=f"exit_adding_{current_list_id}",
                    )
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.", reply_markup=reply_markup
            )
            return

        for item_name, quantity in items_to_add:
            add_item_to_list(current_list_id, item_name, quantity, user_id)

        keyboard = [
            [
                InlineKeyboardButton(
                    "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                    callback_data=f"exit_adding_{current_list_id}",
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_add)}", reply_markup=reply_markup
        )

    elif user_state == STATE_WAITING_FOR_ITEMS:
        current_list_id = USER_CURRENT_LISTS.get(user_id)
        if not current_list_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫")
            del USER_STATES[user_id]
            return

        items_to_add = parse_items(update.message.text)

        if not items_to_add:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        for item_name, quantity in items_to_add:
            add_item_to_list(current_list_id, item_name, quantity, user_id)

        del USER_STATES[user_id]

        await show_current_list_menu(update, user_id, current_list_id)

    elif user_state == STATE_WAITING_FOR_INVITE:
        current_list_id = USER_CURRENT_LISTS.get(user_id)
        if not current_list_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫")
            del USER_STATES[user_id]
            return

        try:
            invited_telegram_id = int(update.message.text.strip())
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        success, message = invite_user_to_list(
            current_list_id, invited_telegram_id, user_id
        )

        del USER_STATES[user_id]

        if success:
            owner_telegram_id = get_list_owner(current_list_id)
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω!\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É:\n"
                f"`/start_{current_list_id}_{owner_telegram_id}`",
                parse_mode="Markdown",
            )
        else:
            await update.message.reply_text(message)

    else:
        if update.message.text.startswith("/"):
            command = update.message.text.split()[0]
            if command == "/lists":
                await lists_command(update, context)
            elif command == "/items":
                await items_command(update, context)
            elif command == "/help":
                await help_command(update, context)
            elif command == "/start":
                await start_command(update, context)
            else:
                await update.message.reply_text(
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                )
        else:
            pass


async def show_current_list_menu(update, user_id, list_id):
    items = get_list_items(list_id)
    list_details = get_list_details(list_id, user_id)

    message_text = f"*–°–ø–∏—Å–æ–∫: {list_details['name']}*\n\n"
    message_text += format_items_list(items)

    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"add_items_{list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã", callback_data=f"delete_items_{list_id}_page_0"
            )
        ],
        [
            InlineKeyboardButton(
                "üß® –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list_{list_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"invite_user_{list_id}"
            )
        ],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="change_list")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message_text, reply_markup=reply_markup, parse_mode="Markdown"
        )
