import re
from typing import List, Tuple


def parse_items(text: str) -> List[Tuple[str, int]]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞, –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–∞–±—É–ª—è—Ü–∏—è

    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

    Returns:
        List[Tuple[str, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    items_raw = re.split(r"[,;|\n\r\t]+", text.strip())

    items = []
    for item in items_raw:
        item = item.strip()
        if not item:
            continue

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "—è–±–ª–æ–∫–∏ 5" –∏–ª–∏ "—Ö–ª–µ–± x3"
        quantity_match = re.search(
            r"(?:\s+x?(\d+))|(?:\s+(\d+)\s*$)", item, re.IGNORECASE
        )
        quantity = 1

        if quantity_match:
            quantity_str = quantity_match.group(1) or quantity_match.group(2)
            if quantity_str:
                try:
                    quantity = int(quantity_str)
                except ValueError:
                    pass
            # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            item = re.sub(r"\s+x?\d+\s*$", "", item, flags=re.IGNORECASE).strip()

        if item:
            items.append((item, quantity))

    return items


def format_items_list(items):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not items:
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"

    formatted = []
    pending_items = [item for item in items if not item["completed"]]
    completed_items = [item for item in items if item["completed"]]

    if pending_items:
        formatted.append("*–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å:*")
        for item in pending_items:
            formatted.append(
                f"‚Ä¢ {item['name']}"
                + (f" x{item['quantity']}" if item["quantity"] > 1 else "")
            )

    if completed_items:
        formatted.append("\n*–ö—É–ø–ª–µ–Ω–æ:*")
        for item in completed_items:
            formatted.append(
                f"~~‚Ä¢ {item['name']}~~"
                + (f" x{item['quantity']}" if item["quantity"] > 1 else "")
            )

    return "\n".join(formatted) if formatted else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"


def format_lists_menu(lists):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —Å–ø–∏—Å–∫–æ–≤"""
    if not lists:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /lists"

    formatted = ["*–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:*"]
    for i, lst in enumerate(lists, 1):
        role_icon = "üëë" if lst["user_role"] == "owner" else "üë•"
        formatted.append(f"{i}. {role_icon} {lst['name']}")

    formatted.append("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")
    return "\n".join(formatted)
